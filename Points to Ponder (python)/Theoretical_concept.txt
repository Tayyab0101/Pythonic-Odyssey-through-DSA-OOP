1. Diffrence b/w implicit and explicit typecasting?
    Pyhthon always converts lower data type in higher and then prints to stop data loss called implicit typecasting. For eaxample in case of input, it always return a str
    Here's a hierarchical order of some common data types in Python:
    a.  Numeric. int - float - complex
    b.  Sequence. str - bytes - bytearray - tuple - list
    c.  Mapping. dict
    d.  Set. set - frozenSet

2. What is diffrence between printing in Python and other languages?
    Simply you don't need to tell or declare data type before storing it in a variable(container). It auto access the type of input. But to explain this, we may use the example of operator overloading method, in which we actually define the role of that operator. Simmilarly, in python all this is already stored.
    str.__add__, int.__gt__ etc

3. Escape character.
    \ : Backlash
    \n : Newline
    \t :tabspace
    \r : Carriage Return

4. Precedence.
    Paranthesis ()
    Exponent **
    unary plus and minus  +x, -x , bitwise NOT ~x
    *, /, //, %
    + , -
    <<, >> Bitwise Shift operators
    & Bitwise AND
    ^ Bitwise XOR
    | Bitwise OR 
    ==, !=, >, >=, <, <=, is, is not, in, in not
    not Logical NOT
    and Logical AND
    or Logical OR
    =, +=, -=, *=, /= Assignment operators

5. Why Python doesn't have the do while loop?
    In Python, there isn't a do-while loop construct like in some other languages because the language prioritizes readability, simplicity, and avoiding unnecessary redundancy in syntax. Instead, Python offers versatile looping constructs like while and for loops, which can achieve similar tasks without introducing additional complexity. By using a while loop with an initial condition check, Python encourages a more Pythonic approach to looping.

6. Types of Error.
    a. Syntax Error.
    b. Runtime Error: Name, Type, ZeroDivion, Index, Value, Attribute, Key, Memory, IO, Import
    c. Semantic or Logic Errors.
